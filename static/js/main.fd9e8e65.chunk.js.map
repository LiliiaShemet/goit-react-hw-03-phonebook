{"version":3,"sources":["components/FilterContact/FilterContact.module.scss","components/Container/Container.module.scss","components/ContatctList/ContactList.module.scss","components/ContactForm/ContactForm.module.scss","components/ContactForm/ContactForm.js","components/ContatctList/ContactList.js","components/FilterContact/FilterContact.js","components/Section/Section.js","components/Container/Container.js","App.js","index.js"],"names":["module","exports","ContactForm","state","name","number","handleChange","e","currentTarget","value","setState","onSubmitForm","preventDefault","console","log","props","handleSubmitForm","reset","this","className","s","form","onSubmit","form__input","onChange","type","pattern","title","required","btn","Component","Contacts","onDeleteContact","list","length","filterList","map","id","filterListItem","text","span","onClick","FilterContact","filter","label","filterInput","Section","children","Container","container","App","contacts","takeCurrentValue","getFilterContact","normalizedFilter","toLowerCase","includes","contact","shortid","generate","find","alert","contactId","localStorage","getItem","parseContact","JSON","parse","prevProps","prevState","setItem","stringify","filtered","ContactList","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd9e8e65.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"FilterContact_label__3hZz5\",\"filterInput\":\"FilterContact_filterInput__2QD3z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__1TclA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterList\":\"ContactList_filterList__2_510\",\"filterListItem\":\"ContactList_filterListItem__3n6QA\",\"text\":\"ContactList_text__O8IG4\",\"span\":\"ContactList_span__2VQwu\",\"btn\":\"ContactList_btn__2CGko\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__plzVI\",\"form__input\":\"ContactForm_form__input__2k1g7\",\"btn\":\"ContactForm_btn__182xQ\"};","import PropTypes from 'prop-types';\r\nimport { Component } from 'react';\r\nimport s from './ContactForm.module.scss';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  handleChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n    this.setState({ [name]: value });\r\n  };\r\n  onSubmitForm = e => {\r\n    e.preventDefault();\r\n    console.log(this.state);\r\n    this.props.handleSubmitForm(this.state);\r\n    this.reset();\r\n  };\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <form className={s.form} onSubmit={this.onSubmitForm}>\r\n        <label>\r\n          Name\r\n          <input\r\n            className={s.form__input}\r\n            onChange={this.handleChange}\r\n            value={name}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            \r\n          />\r\n        </label>\r\n        <label>\r\n          Number\r\n          <input\r\n            className={s.form__input}\r\n            onChange={this.handleChange}\r\n            value={number}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            \r\n          />\r\n        </label>\r\n        <button className={s.btn}>add contact</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  handleSubmitForm: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactForm;\r\n","import PropTypes from 'prop-types';\r\nimport s from './ContactList.module.scss';\r\n\r\nconst Contacts = ({ onDeleteContact, list }) => {\r\n  console.log(list);\r\n  if (list.length === 0) return null;\r\n  return (\r\n    <ul className={s.filterList}>\r\n      {list.map(({ id, number, name }) => (\r\n        <li className={s.filterListItem} key={id}>\r\n          <p className={s.text}>\r\n            {name}: <span className={s.span}>{number}</span>\r\n          </p>\r\n\r\n          <button\r\n            className={s.btn}\r\n            onClick={() => onDeleteContact(id)}\r\n            type=\"button\"\r\n          >\r\n            delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContacts.propTypes = {\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n  list: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string.isRequired)),\r\n};\r\n\r\nexport default Contacts;\r\n","import PropTypes from 'prop-types';\r\nimport s from './FilterContact.module.scss';\r\n\r\nconst FilterContact = ({ value, filter }) => {\r\n  return (\r\n    <label className={s.label}>\r\n      Find contacts by name\r\n      <input className={s.filterInput} onChange={value} value={filter} />\r\n    </label>\r\n  );\r\n};\r\n\r\nFilterContact.propTypes = {\r\n  value: PropTypes.func.isRequired,\r\n  filter: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default FilterContact;\r\n","const Section = ({ title, children }) => {\r\n  return (\r\n    <section>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Section;\r\n","import s from './Container.module.scss';\r\nimport React from 'react';\r\n\r\nconst Container = ({ children }) => {\r\n  return <div className={s.container}>{children}</div>;\r\n};\r\n\r\nexport default Container;\r\n","import { Component } from 'react';\r\nimport ContactForm from './components/ContactForm';\r\nimport ContactList from './components/ContatctList';\r\nimport FilterContact from './components/FilterContact';\r\nimport Section from './components/Section';\r\nimport Container from './components/Container';\r\nimport shortid from 'shortid';\r\nimport 'modern-normalize/modern-normalize.css';\r\nclass App extends Component {\r\n  state = {\r\n    filter: '',\r\n    contacts: [],\r\n  };\r\n  componentDidMount() {\r\n    const contact = localStorage.getItem('contact');\r\n    const parseContact = JSON.parse(contact);\r\n    if (parseContact) {\r\n      this.setState({ contacts: parseContact });\r\n    }\r\n  }\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { contacts } = this.state;\r\n    if (this.state.contacts !== prevState.contacts) {\r\n      localStorage.setItem('contact', JSON.stringify(contacts));\r\n    }\r\n  }\r\n  takeCurrentValue = e => {\r\n    const { value } = e.currentTarget;\r\n    this.setState({ filter: value });\r\n  };\r\n  getFilterContact = () => {\r\n    const { contacts, filter } = this.state;\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return contacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  };\r\n  handleSubmitForm = ({ name, number }) => {\r\n    const contact = {\r\n      id: shortid.generate(),\r\n      name,\r\n      number,\r\n    };\r\n\r\n    if (this.state.contacts.find(({ name }) => name === contact.name)) {\r\n      alert(`${contact.name} is already in contacts`);\r\n      return;\r\n    }\r\n    this.setState(({ contacts }) => ({ contacts: [...contacts, contact] }));\r\n  };\r\n\r\n  onDeleteContact = contactId => {\r\n    this.setState(({ contacts }) => ({\r\n      contacts: contacts.filter(contact => contact.id !== contactId),\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const { filter } = this.state;\r\n    const filtered = this.getFilterContact();\r\n\r\n    return (\r\n      <Container className=\"App\">\r\n        <Section title=\"Phonebook\">\r\n          <ContactForm handleSubmitForm={this.handleSubmitForm} />\r\n        </Section>\r\n        <Section title=\"Contacts\">\r\n          <FilterContact value={this.takeCurrentValue} filter={filter} />\r\n          <ContactList onDeleteContact={this.onDeleteContact} list={filtered} />\r\n        </Section>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}